FUNCTION_BLOCK "Omron_Q2V"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      mbAddr : USInt;   // Modbus address of slave device
      clearFault { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Clear drive fault
      setFrequency : Real;   // Frequency setpoin
   END_VAR

   VAR_OUTPUT 
      ready { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Drive is ready to run
      running { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Drive is running
      fault { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Drive has fault
      outFreq : Real;   // Output frequency
   END_VAR

   VAR_IN_OUT 
      mbQuery : "mb_query";   // Instance .. Modbus query
   END_VAR

   VAR 
      read { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         status { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;   // Status bits
         outFreq { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UInt;   // Output frequency
      END_STRUCT;
      write { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         cmd { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;   // Command bits
         refFreq { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UInt;   // Requested reference frequency
      END_STRUCT;
      sb : "mb_station_block_udt";   // Instance .. Station block
   END_VAR


BEGIN
	(* Omron - Q2V - AC Micro Drive
	      DOC: https://assets.omron.eu/downloads/manual/en/v4/q2v_technical_manual_en.pdf            
	*)
	
	// == HEADER ===================================================================
	"mb_station_block_header"(sb := #sb,
	                          mb_query := #mbQuery);
	#mbQuery.mb_addr := #mbAddr;
	
	
	// == WRITE QUERY ==============================================================
	#mbQuery.mode := #mbQuery.c.write.single_holding_reg;
	
	// Command bits
	(*    
	   forward     00> H5-12 = 0 {0: Stop, 1: Forward run} | H5-12 = 1 {0: Stop, 1: Run}
	   reverse     01> H5-12 = 0 {0: Stop, 1: Reverse run} | H5-12 = 1 {0: Forward, 1: Reverse}
	   extFault    02> 1: External fault
	   clearFault  03> 1: Reset fault 
	   multiIn1    04> Multi-function input 1 | "ComRef"
	   multiIn2    05> Multi-function input 2 | "ComCtrl"
	   multiIn3    06> Multi-function input 3
	   multiIn4    07> Multi-function input 4
	   multiIn5    08> Multi-function input 5
	   multiIn6    09> Multi-function input 6
	   multiIn7    10> Multi-function input 7
	   bitB        11> reserved
	   bitC        12> reserved
	   bitD        13> reserved
	   bitE        14> reserved
	   bitF        15> reserved
	*)
	#write.cmd.%X5 := #clearFault;
	#mbQuery(data_addr := 16#0001,
	         data_len := 1,
	         data_ptr := #write.cmd);
	
	
	// Reference frequency
	#write.refFreq := REAL_TO_UINT(#setFrequency * 100.0);
	#mbQuery(data_addr := 16#0002,
	         data_len := 1,
	         data_ptr := #write.refFreq);
	
	
	
	// == READ QUERY ===============================================================
	#mbQuery.mode := #mbQuery.c.read.holding_reg;
	
	// Status word
	(*
	   running        00> {0: During stop, 1: During run}
	   reversing      01> {0: Forward run, 1: During reverse}
	   ready          02> {0: Not ready, 1: Ready}
	   fault          03> 1: Fault
	   opeError       04> Data Setting Error .. 1: oPExx error
	   relayOut       05> (NO/NC-CM) {0: OFF, 1: ON}
	   Out1           06> (DO1-O1C) {0: OFF, 1: ON}
	   Out2           07> (DO2-O2C) {0: OFF, 1: ON}
	   bit8           08> reserved
	   bit9           09> reserved
	   bitA           10> reserved
	   bitB           11> reserved
	   bitC           12> reserved
	   bitD           13> reserved
	   ComRef         14> 1: Enabled
	   ComCtrl        15> 1: Enabled
	*)
	#mbQuery(data_addr := 16#0020,
	         data_len := 1,
	         data_ptr := #read.status);
	#ready := #read.status.%X2;
	#running := #read.status.%X0;
	#fault := #read.status.%X3;
	
	
	// Output frequency
	#mbQuery(data_addr := 16#0024,
	         data_len := 1,
	         data_ptr := #read.outFreq);
	#outFreq := UINT_TO_REAL(#read.outFreq) / 100.0;
	
	
	
	// == FOOTER ===================================================================
	"mb_station_block_footer"(sb := #sb,
	                          mb_query := #mbQuery);
	
END_FUNCTION_BLOCK

