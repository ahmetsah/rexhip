FUNCTION_BLOCK "Syxthsense_TEHR_M"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      unit : USInt := 1;
   END_VAR

   VAR_OUTPUT 
      data : Struct
         temperature : Real;   // [째C]
         analogue_output : Real;   // [째F]
         potentiometer_position : Real;   // [%]
      END_STRUCT;
   END_VAR

   VAR_IN_OUT 
      mb : "udt_mb";
   END_VAR

   VAR 
      common : "udt_mb_common";
      param : Struct
         one_point_calibration_field : Real;
         control_mode : Int;   // 0=Off,1=P,2=PI
         setpoint : Real;
         proportional_band : Real;
         integration_time : Real;
      END_STRUCT;
      query_1_read : Struct
         temperature : Int;   // [째C]
         analogue_output : Int;   // [째F]
         potentiometer_position : Int;   // [%]
      END_STRUCT;
      query_2_write : Struct
         one_point_calibration_field : Int;
         control_mode : Int;   // 0=Off,1=P,2=PI
         setpoint : Int;
         proportional_band : Int;
         integration_time : Int;
      END_STRUCT;
      read_done : Bool;
   END_VAR


BEGIN
	// Syxthsense - TEHR-M
	// Temperature transmitter
	
	// Warning: Block is NOT tested !
	
	// Doc:
	// http://www.syxthsense.com/product/product_pdf/SN1.174-TEHR-M.pdf
	
	"mb_device_header"(common := #common, mb := #mb);
	
	"mb_query"(unit := #unit,
	           fc := #mb.c.mode.read,
	           d_addr := 30001,
	           d_len := #mb.c.auto_len,
	           data := #query_1_read,
	           mb := #mb);
	
	// Parameters to the device.
	// Read out the parameters first, to make sure that they are not overwritten.
	// remove comment mark to enable write.
	(*IF #read_done THEN  
	    #query_2_write.one_point_calibration_field := REAL_TO_INT(#param.one_point_calibration_field * 10);
	    #query_2_write.control_mode := #param.control_mode; // 0=Off,1=P,2=PI
	    #query_2_write.setpoint := REAL_TO_INT(#param.setpoint * 10);
	    #query_2_write.proportional_band := REAL_TO_INT(#param.proportional_band * 10);
	    #query_2_write.integration_time := REAL_TO_INT(#param.integration_time * 10);
	    "mb_query"(unit := #unit,
	               fc := #mb.c.mode.write,
	               d_addr := 40001,
	               d_len := #mb.c.auto_len,
	               data := #query_2_write,
	               mb := #mb);
	ELSE  
	    "mb_query"(unit := #unit,
	               fc := #mb.c.mode.read,
	               d_addr := 40001,
	               d_len := #mb.c.auto_len,
	               data := #query_2_write,
	               mb := #mb);
	    IF #mb.stat.query_above AND #mb.stat.done THEN
	        #read_done := true;
	    END_IF;
	    #param.one_point_calibration_field := INT_TO_REAL(#query_2_write.one_point_calibration_field) / 10;
	    #param.control_mode := #query_2_write.control_mode; // 0=Off,1=P,2=PI
	    #param.setpoint := INT_TO_REAL(#query_2_write.setpoint) / 10;
	    #param.proportional_band := INT_TO_REAL(#query_2_write.proportional_band) / 10;
	    #param.integration_time := INT_TO_REAL(#query_2_write.integration_time) / 10;
	END_IF; //*)
	
	
	"mb_device_footer"(common := #common, mb := #mb);
	
	IF #common.out.communication_error THEN
	    #query_1_read.temperature := 0;
	    #query_1_read.analogue_output := 0;
	    #query_1_read.potentiometer_position := 0;
	END_IF;
	#data.temperature := INT_TO_REAL(#query_1_read.temperature) / 10;
	#data.analogue_output := INT_TO_REAL(#query_1_read.analogue_output) / 10;
	#data.potentiometer_position := INT_TO_REAL(#query_1_read.potentiometer_position) / 10;
	
END_FUNCTION_BLOCK

