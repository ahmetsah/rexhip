TYPE "udt_mb"
VERSION : 0.1
   STRUCT
      c : Struct   // Constants
         read : Struct   // Read: 1, 2, 3, 4
            output_bits { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 1;   // 1 - (coils)
            input_bits { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 2;   // 2 - (discrete inputs)
            holding_reg { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 3;   // 3
            input_reg { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 4;   // 4
         END_STRUCT;
         write : Struct   // Write: 5, 6, 15, 16
            single_output_bit { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 5;   // 5 - (coil) (when len. is eq. to 1)
            single_holding_reg { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 6;   // 6 (when len. is eq. to 1)
            output_bits { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 15;   // 15 - (coils)
            holding_reg { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 16;   // 16
         END_STRUCT;
         mode : Struct   // Modicon convention addressing. (eg: hold.reg. start at 40001)
            read { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 200;   // Mode 0
            write_single { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 201;   // Mode 1 (fc: 5, 6) (when len. is eq. to 1)
            write { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 202;   // Mode 2 (fc: 15, 16)
         END_STRUCT;
         auto_len : UInt := 0;   // 0 - Length will be callculated automatically.
      END_STRUCT;
      conf : Struct   // Configuration
         buffer_handler : Bool := TRUE;   // enable buffer handler
      END_STRUCT;
      stat : Struct   // Status of last executed query
         done : Bool;   // Successfull
         error : Bool;   // Error, including timeout error
         done_or_error : Bool;   // Done, error or timeout
         timeout : Bool;   // Only timeout error
         exception : Bool;   // error except timeout
         done_or_exception : Bool;   // Done or error, except timeout
         query_above : Bool;   // Refer to the query above in the code.
         status : Word;   // status word of mb_master or mb_client
      END_STRUCT;
      z : Struct   // Internal states.
         buffer : Array[0..250] of Byte;   // Buffer
         q : Struct   // Query params
            qid : UInt := 1;   // query id
            unit : UInt := 1;   // Station address
            "fc" : UInt := 3;   // Function code
            d_addr : UDInt;   // Data address
            d_len : UInt := 1;   // Data length
         END_STRUCT;
         run : Struct   // Constantly changing variables
            qid_cnt : UInt;   // Query id cnt. increase for each query, reset in controller. One loop each scan
            mode : USInt := 0;   // from fc
            data_addr : UDInt;   // from d_addr
            insert : Bool := TRUE;   // insert query param
            busy : Bool;   // mb_master or mb_client is busy.
            write : Bool;   // A write  query is inserted
         END_STRUCT;
         com : Struct   // tmp. storate device header and footer.
            did_cnt : UInt;   // Device id cnt
            did_retry : UInt := 1;   // Retry device id, qComError
            retry_finished : Bool;
            insert_id : USInt;   // Inc. at mb_query on insert
            recive_id : USInt;   // Inc. at mb_query on rec.
            recived_d_addr : UDInt;   // Tmp.var. for transf. value to mb_device_footer
            did : UInt;   // Device ID
            insert2 : Bool;   // Stays true even after mb_query has inserted new param.
         END_STRUCT;
      END_STRUCT;
   END_STRUCT;

END_TYPE

FUNCTION_BLOCK "mb_buffer"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR 
      buffer : Array[0..250] of Byte;
   END_VAR


BEGIN
	// This block is used as buffer for mb_master
	// (modbus rtu). "Optimized block access" is
	// turn off as mb_master require.
	
	// This block is not used for modbus tcp.
END_FUNCTION_BLOCK

FUNCTION "mb_buffer_handler" : Void
{ S7_Optimized_Access := 'FALSE' }
VERSION : 1.0
   VAR_INPUT 
      action : SInt;
   END_VAR

   VAR_IN_OUT 
      data : Variant;
      bytes : DInt;
      buffer : Array[0..250] of Byte;
   END_VAR

   VAR_TEMP 
      tmp_buffer : Array[0..250] of Byte;
      e : Int;
   END_VAR


BEGIN
	// This FC do 3 diffrent actions.
	CASE #action OF
	    1:  // Count bytes.
	        #bytes := 0;
	        #tmp_buffer := #buffer;
	        #e := Serialize(SRC_VARIABLE := #data,
	                        DEST_ARRAY => #tmp_buffer,
	                        POS := #bytes);
	        
	    2:  // Write to buffer.
	        #bytes := 0;
	        #e := Serialize(SRC_VARIABLE := #data,
	                        DEST_ARRAY => #tmp_buffer,
	                        POS := #bytes);
	        #buffer := #tmp_buffer;
	        
	    3:  // Read from buffer.
	        #bytes := 0;
	        #tmp_buffer := #buffer;
	        #e := Deserialize(SRC_ARRAY := #tmp_buffer,
	                          DEST_VARIABLE => #data,
	                          POS := #bytes);
	END_CASE;
	
END_FUNCTION

TYPE "udt_mb_common"
VERSION : 0.1
   STRUCT
      in : Struct   // Inputs
         unit : USInt;   // (not in use)
         disable : Bool;   // Skip all queries and reset
      END_STRUCT;
      out : Struct   // Outputs
         error : Bool;   // All errors, including communication errors
         communication_error : Bool;   // only communication errors
         finnish : Bool;   // qid is handed over to next device.
      END_STRUCT;
      conf : Struct   // Configuration
         max_repeating_timeouts { S7_SetPoint := 'True'} : USInt := 2;   // before communication_error flag is set
         exec_all_quries { S7_SetPoint := 'True'} : Bool;   // Execute all queries in the device block for each loop.
      END_STRUCT;
      log : Struct   // Logging for development and debugging.
         done_cnt : UDInt;   // Successfully queries counter for this device
         done_dtl {OriginalPartName := 'DTL'; LibVersion := '1.0'} : DTL;   // DTL for last successfully querie
         error_cnt : UDInt;   // Failed queries counter for this device
         error_dtl {OriginalPartName := 'DTL'; LibVersion := '1.0'} : DTL;   // DTL for last failed querie
         error_status : Word;   // Status code from mb_master or mb_client
         error_timeout : Bool;   // For the last failed querie
         error_d_addr : UDInt;   // d_addr for last failed querie; handy for troubleshooting
      END_STRUCT;
      z : Struct   // Internal states.
         header_qid : UInt;   // qid value at device header
         timeout_cnt : USInt;   // Repeating timeout errors
         offset_qid : UInt := 1;   // Device query id.
         insert_id : USInt;   // snap shot of insert_id in mb at header
         recive_id : USInt;   // snap shot of recive_id in mb at header
      END_STRUCT;
   END_STRUCT;

END_TYPE

FUNCTION "mb_ctrl_end" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      mb : "udt_mb";   // udt mb
   END_VAR


BEGIN
	// Common for both rtu and tcp.
	
	// Status for last query, and insert.
	#mb.stat.exception := #mb.stat.error AND NOT #mb.stat.timeout;
	#mb.stat.done_or_exception := #mb.stat.done OR #mb.stat.exception;
	#mb.stat.done_or_error := #mb.stat.done OR #mb.stat.error;
	#mb.z.com.insert2 := #mb.z.run.insert;
	
	// Make sure that a write query is not exec. twice.
	IF #mb.stat.done_or_error THEN
	    #mb.z.run.mode := 0;
	END_IF;
	
	// If all queries has been executed, then start over again on the first query.
	IF #mb.z.q.qid > #mb.z.run.qid_cnt THEN
	    #mb.z.q.qid := 1;
	    
	    // The retry-id is the device that get to have retry to restoring
	    // communication after the qComError flag is set for the device.
	    // When one query loop has occurred the retry id is incremented. 
	    #mb.z.com.did_retry := #mb.z.com.did_retry + 1;
	    
	    // retry_finished is set after one retry has taken place. 
	    // The device that has the retry-token only has one try to make 
	    // successfully query.
	    #mb.z.com.retry_finished := false;
	    IF #mb.z.com.did_retry > #mb.z.com.did_cnt THEN
	        #mb.z.com.did_retry := 1;
	    END_IF;
	    
	    // Device id
	    #mb.z.com.did := #mb.z.com.did + 1;
	    IF #mb.z.com.did > #mb.z.com.did_cnt THEN
	        #mb.z.com.did := 1;
	    END_IF;
	END_IF;
	#mb.z.run.qid_cnt := 0; // (Incremented in mb_query)
	#mb.z.com.did_cnt := 0; // (Incremented in mb_device_header)
	
END_FUNCTION

FUNCTION_BLOCK "mb_client_ctrl"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
   VAR_INPUT 
      interface : HW_ANY := 64;   // Profinet interface id
      conn_id : CONN_OUC := 123;   // Connection id
      ip_addr : Array[1..4] of Byte;   // IPv4
      tcp_port : UInt := 502;   // TCP port
      timeout : Time := T#1S;
   END_VAR

   VAR_OUTPUT 
      qError : Bool;   // error flag with tof timer
   END_VAR

   VAR_IN_OUT 
      mb : "udt_mb";   // udt mb
   END_VAR

   VAR 
      conf : Struct
         disconnect : Bool := FALSE;
         retries : USInt := 0;
      END_STRUCT;
      mb_client {OriginalPartName := 'MB_CLIENT'; LibVersion := '4.1'} : MB_CLIENT;
      tcon_ip_v4 {OriginalPartName := 'TCON_IP_v4'; LibVersion := '1.0'} : TCON_IP_v4;
      ton_timeout {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TON_TIME;
      ton_timeout_q : Bool;
      timeout_state : SInt;
      tdiscon {OriginalPartName := 'T_DISCON'; LibVersion := '2.1'} : TDISCON;
      tdiscon_bool : Bool;
      tof_error {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TOF_TIME;
   END_VAR


BEGIN
	// If mb_client does not establish a connection it will not throw
	// timeout error. Timeout is handled manually for that case.
	// 16#7002: Intermediate call. Connection is being established.
	#ton_timeout(IN := #mb_client.STATUS = 16#7002,
	             PT := #timeout,
	             Q => #ton_timeout_q);
	
	#tcon_ip_v4.InterfaceId := #interface;
	#tcon_ip_v4.ID := #conn_id;
	#tcon_ip_v4.ConnectionType := 11;
	#tcon_ip_v4.ActiveEstablished := true;
	#tcon_ip_v4.RemoteAddress.ADDR := #ip_addr;
	#tcon_ip_v4.RemotePort := #tcp_port;
	
	#mb_client.MB_Unit_ID := UINT_TO_BYTE(#mb.z.q.unit);
	#mb_client.Rcv_Timeout := UINT_TO_REAL(TIME_TO_UINT(#timeout)) * 0.001;
	#mb_client.Retries := #conf.retries;
	#mb_client(REQ := NOT #mb_client.BUSY AND NOT #mb.z.run.insert
	           AND NOT #mb_client.DISCONNECT,
	           DISCONNECT := #conf.disconnect
	           OR #tdiscon.BUSY OR #timeout_state = 1 OR #mb.z.q.qid = 0,
	           MB_MODE := #mb.z.run.mode,
	           MB_DATA_ADDR := #mb.z.run.data_addr,
	           MB_DATA_LEN := #mb.z.q.d_len,
	           BUSY => #mb.z.run.busy,
	           DONE => #mb.stat.done,
	           ERROR => #mb.stat.error,
	           STATUS => #mb.stat.status,
	           MB_DATA_PTR := #mb.z.buffer,
	           CONNECT := #tcon_ip_v4);
	
	// Timeout handeling.
	IF #mb_client.DONE OR #mb_client.ERROR THEN
	    #mb.stat.timeout := #mb.stat.error
	    AND (#mb.stat.status = 16#818C // blocked_proc_timeout or rcv_timeout
	    OR #mb.stat.status = 16#80C8 // No response from the server
	    OR #timeout_state = 2); // Reconnect after disconnect.
	    
	    #timeout_state := 0; // Reset
	ELSE
	    CASE #timeout_state OF
	        0: // Normal opperation (no ton_timeout)
	            #timeout_state := BOOL_TO_SINT(#ton_timeout_q);
	        1: // Disconnect and reconnect mb_client.
	            #timeout_state := 2;
	    END_CASE;
	END_IF;
	
	// If a new download has taken place, and this block is re-initialize,
	// then the mb_client block will output the error code saying that:
	// "Attempt being made to re-establish an existing connection." (16#80A3).
	// The solution to this problem is to disconnect and then reconnect.
	#tdiscon(REQ := #mb_client.STATUS = 16#80A3, ID := #conn_id);
	
	// --------------------------------------------------
	"mb_ctrl_end"(#mb);
	#tof_error(IN := #mb.stat.error,
	           PT := #tof_error.PT,
	           Q => #qError);
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "mb_master_ctrl"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
   VAR_INPUT 
      hardware_id : PORT;   // hardware id
      baud : UDInt := 19200;
      timeout : Time := T#500MS;
   END_VAR

   VAR_OUTPUT 
      qError : Bool;
   END_VAR

   VAR_IN_OUT 
      mb : "udt_mb";   // udt mb
   END_VAR

   VAR 
      conf : Struct
         parity : UInt := 2;   // 0=no-parity, 1=odd, 2=even.
         mb_comm_load_req : Bool;
         retries : USInt := 0;
      END_STRUCT;
      mb_comm_load {OriginalPartName := 'MB_COMM_LOAD'; LibVersion := '2.1'} : MB_COMM_LOAD;
      mb_master {OriginalPartName := 'MB_MASTER'; LibVersion := '2.2'} : MB_MASTER;
      tof_error {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TOF_TIME;
      buffer { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "mb_buffer";
   END_VAR

   VAR_TEMP 
      c : Int;
   END_VAR


BEGIN
	// Initiate the hardware.
	#mb_comm_load.RETRIES := #conf.retries;
	#mb_comm_load(REQ := NOT #mb_comm_load.DONE AND NOT #mb_master.BUSY
	              XOR #conf.mb_comm_load_req,
	              "PORT" := #hardware_id,
	              BAUD := #baud,
	              PARITY := #conf.parity,
	              RESP_TO := TIME_TO_UINT(#timeout),
	              MB_DB := #mb_master);
	
	IF NOT #mb_master.BUSY // The inserted query is not allready in process.
	    AND #mb.z.run.write // (not read)
	THEN
	    #buffer.buffer := #mb.z.buffer;
	END_IF;
	
	// The core master block.
	#mb_master(REQ := #mb_comm_load.DONE AND NOT #mb_master.BUSY
	           AND NOT #mb.z.run.insert,
	           MB_ADDR := #mb.z.q.unit,
	           MODE := #mb.z.run.mode,
	           DATA_ADDR := #mb.z.run.data_addr,
	           DATA_LEN := #mb.z.q.d_len,
	           DONE => #mb.stat.done,
	           BUSY => #mb.z.run.busy,
	           ERROR => #mb.stat.error,
	           STATUS => #mb.stat.status,
	           DATA_PTR := #buffer.buffer);
	
	IF NOT #mb_master.BUSY AND NOT #mb.z.run.write THEN
	    #mb.z.buffer := #buffer.buffer;
	END_IF;
	
	// Timeout error (Handled different from other errors)
	#mb.stat.timeout := #mb_master.ERROR
	AND #mb_master.STATUS = 16#80C8;
	
	// --------------------------------------------------
	"mb_ctrl_end"(#mb);
	#tof_error(IN := #mb.stat.error,
	           PT := #tof_error.PT,
	           Q => #qError);
	
END_FUNCTION_BLOCK

FUNCTION "mb_device_footer" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
   VAR_IN_OUT 
      common : "udt_mb_common";   // Common
      mb : "udt_mb";   // udt mb
   END_VAR

   VAR_TEMP 
      e : Int;
      tFinnish : Bool;
   END_VAR


BEGIN
	#common.out.error := false;
	
	// If device is disabled, then reset the error flags.
	IF #common.in.disable THEN
	    #common.out.error := false;
	    #common.out.communication_error := false;
	    #common.z.timeout_cnt := 0;
	ELSIF #mb.z.com.recive_id <> #common.z.recive_id THEN
	    // If there is a query that bellong to this device that has
	    // recvied a resault. (with or without error)
	    
	    IF #mb.stat.done THEN // Logging successfully query        
	        #common.log.done_cnt := #common.log.done_cnt + 1;
	        #e := RD_LOC_T(#common.log.done_dtl);
	        
	        // One successfully query -> reset 
	        #common.out.communication_error := false;
	        #common.z.timeout_cnt := 0;
	        
	    ELSIF #mb.stat.error THEN // Logging - failed query        
	        #common.log.error_cnt := #common.log.error_cnt + 1;
	        #e := RD_LOC_T(#common.log.error_dtl);
	        #common.log.error_status := #mb.stat.status;
	        #common.log.error_d_addr := #mb.z.com.recived_d_addr;
	        #common.log.error_timeout := #mb.stat.timeout;
	        
	        // Increase timeout cnt. if it's a timeout error.
	        // if it's not a timeout error then reset the cnt.        
	        #common.z.timeout_cnt := SEL(G := #mb.stat.timeout,
	                                     IN0 := 0,
	                                     IN1 := MIN(IN1 := #common.z.timeout_cnt + 1,
	                                                IN2 := 254));
	        
	        // qComError is only set if x repeating timeout errors has
	        // occurred.
	        #common.out.communication_error := #common.z.timeout_cnt
	        > #common.conf.max_repeating_timeouts;
	        
	        // A timeout error will not be displayed befor the
	        // communication_error flag is set. Other ettors will be
	        // diplayed once. (NOT timeout -> normal error)
	        #common.out.error := NOT #mb.stat.timeout
	        OR #common.out.communication_error;
	        
	        // High for one scan
	        #common.out.error := TRUE;
	    END_IF;
	    
	    // - If it's this devices that has the retry-token, and a retry has
	    //   been executed. Then set the retry_finished flag.
	    // - The retry-token will be passed on to the next device with
	    //   communication problems when the query loop has reach
	    //   the end. (Inside the controller)
	    // - The purpose of the flag is make sure that a retry is only done
	    //   once for each query loop revolution.
	    #mb.z.com.retry_finished := #mb.z.com.did_retry = #mb.z.com.did_cnt
	    AND #mb.stat.timeout;
	    
	    // Only one query for each device for each loop is allowed to be
	    // executed. offset_qid is incread by one when a query has executed
	    // given last query didn't resualt in a timeout.
	    #common.z.offset_qid := #common.z.offset_qid
	    + BOOL_TO_UINT(NOT #mb.stat.timeout);
	END_IF;
	
	// If all queries for this device has been executed, then reset offset_qid.
	IF #common.z.offset_qid > #mb.z.run.qid_cnt - #common.z.header_qid THEN
	    #common.z.offset_qid := 1;
	END_IF;
	
	// If the retry-token point at this device (did_retry=did_cnt), and there is
	// no communication problems then pass on the retry-token to the next device.
	// The retry token tell which device with communication problem that should
	// retry establish communication.
	#mb.z.com.did_retry := #mb.z.com.did_retry
	+ BOOL_TO_UINT(#mb.z.com.did_retry = #mb.z.com.did_cnt
	               AND NOT #common.out.communication_error);
	
	// Several condition that resault in passing on the query-token on to the
	// next device. Skipping all or the rest of the queries for this device:
	// - If this device has one query that have received a result.
	//   (One query from each device for each loop, regardsless successfully
	//   or failed query)
	// - If qComError is set, and isn't this device turn to try again.  
	// - If the device is not enabled. (skip all queries)
	IF #mb.z.com.recive_id <> #common.z.recive_id
	    AND (NOT #common.conf.exec_all_quries OR #mb.stat.timeout)
	    
	    OR #mb.z.com.insert_id <> #common.z.insert_id AND (
	    #common.out.communication_error
	    AND (#mb.z.com.did_retry <> #mb.z.com.did_cnt
	    OR #mb.z.com.retry_finished)
	    // (retry_finished will be reset in the controller)
	    OR #common.in.disable )
	THEN
	    // Reset
	    #mb.z.run.insert := true;
	    #mb.z.q.qid := #mb.z.run.qid_cnt + 1;
	    #tFinnish := true;
	END_IF;
	#common.out.finnish := #tFinnish OR #mb.stat.query_above;
	
END_FUNCTION

FUNCTION "mb_query" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
   VAR_INPUT 
      unit : UInt;   // Device addr. (0 to 247)
      "fc" : USInt;   // Function code: 1,2,3,4,5,6,15,16. (siemens mode shifted to 200 - 202)
      d_addr : UDInt;   // Data addr. (raw telegram value, 0-65535)
      d_len : UInt;   // Data len. 0=>Auto detect
   END_VAR

   VAR_IN_OUT 
      data : Variant;   // Bytes and bools has to add up to whole word(s)
      mb : "udt_mb";   // udt mb
   END_VAR

   VAR_TEMP 
      c : Int;
      e : Int;
      tLen : UInt;
      tBytes : DInt;
   END_VAR


BEGIN
	// Rexhip - Modbus API for Siemens PLC's
	// -----------------------------------------
	// Author:   Ola Bjornli
	// Version:  1.0.10
	// License:  MIT-license
	// Web:      http://github.com/olab84/rexhip
	
	#mb.stat.query_above := false;
	#mb.z.run.qid_cnt := #mb.z.run.qid_cnt + 1;
	
	// qid_cnt is increased for every query (above) and reset back
	// to zero in mb_client_ctrl or in mb_master_ctrl. qid
	// is only increased when a query finnish. A query should execute
	// when they are equal to each other. qid is reset back to "1"
	// when all queryies has been executed.
	IF #mb.z.run.qid_cnt <> #mb.z.q.qid
	    OR #mb.z.run.busy
	THEN
	    RETURN;
	END_IF;
	
	// d_len=0 => Automatically calculate the length based on the
	// size (bytes) of "#data".
	IF #d_len = 0 AND #mb.conf.buffer_handler AND
	    (#mb.z.run.insert OR #mb.stat.done_or_error)
	THEN
	    "mb_buffer_handler"(action := 1, // Count bytes.                        
	                        data := #data,
	                        bytes := #tBytes,
	                        buffer := #mb.z.buffer);
	    CASE #fc OF
	        1, 2, 5, 15:
	            #tLen := DINT_TO_UINT(#tBytes * 8); // Bits
	        3, 4, 6, 16:
	            #tLen := DINT_TO_UINT(#tBytes / 2); // Words
	        200..202:
	            CASE #d_addr OF
	                1..9999, 10001..19999:
	                    #tLen := DINT_TO_UINT(#tBytes * 8); // Bits
	                30001..39999, 30001..49999, 400001..465535:
	                    #tLen := DINT_TO_UINT(#tBytes / 2); // Words
	            END_CASE;
	    END_CASE;
	ELSE
	    #tLen := #d_len; // Words (16 bits)
	    #tBytes := #d_len * 2;
	END_IF;
	
	IF #mb.z.run.insert THEN // Insert query.
	    #mb.z.run.mode := 0; // 0 => read (default)
	    #mb.z.run.write := false;
	    
	    // mb_client and mb_master use modicon convention address.
	    // Convertion in to Jbus adressing (direct adressing).
	    CASE #fc OF
	        1:  // Read output bits             
	            #mb.z.run.data_addr := 1 + #d_addr;
	        2:  // Read input bits            
	            #mb.z.run.data_addr := 10001 + #d_addr;
	        3:  // Read holding reg.            
	            #mb.z.run.data_addr := 400001 + #d_addr;
	        4:  // Read input word            
	            #mb.z.run.data_addr := 30001 + #d_addr;
	        5:  // Writing a single output bit
	            #mb.z.run.mode := 1;
	            #mb.z.run.data_addr := 1 + #d_addr;
	            #mb.z.run.write := true;
	        6:  // Writing a single holding register
	            #mb.z.run.mode := 1;
	            #mb.z.run.data_addr := 400001 + #d_addr;
	            #mb.z.run.write := true;
	        15: // Writing multiple output bits
	            #mb.z.run.mode := 2;
	            #mb.z.run.data_addr := 1 + #d_addr;
	            #mb.z.run.write := true;
	        16: // Writing multiple holding registers
	            #mb.z.run.mode := 2;
	            #mb.z.run.data_addr := 400001 + #d_addr;
	            #mb.z.run.write := true;
	        200: // Siemens mode 0-2 replaced by 200-202
	            #mb.z.run.mode := #fc - 200;
	            #mb.z.run.data_addr := #d_addr;
	        201..202: // Siemens mode 0-2 replaced by 200-202
	            #mb.z.run.mode := #fc - 200;
	            #mb.z.run.data_addr := #d_addr;
	            #mb.z.run.write := true;
	        // ELSE
	            // #mb.z.run.mode := #fc;
	            // #mb.z.run.data_addr := #d_addr;
	    END_CASE;
	    
	    // The params is transfered over to the udt. They are later
	    // transfered from the udt to mb_master or mb_client.
	    #mb.z.q.unit := #unit;
	    #mb.z.q.fc := #fc;
	    #mb.z.q.d_addr := #d_addr;
	    #mb.z.q.d_len := #tLen;
	    IF #mb.conf.buffer_handler AND #mb.z.run.write THEN
	        // Copy the content from "#data" to the buffer in the udt.
	        "mb_buffer_handler"(action := 2, // 2=write            
	                            data := #data,
	                            bytes := #tBytes,
	                            buffer := #mb.z.buffer);
	    END_IF;
	    // false while waiting for the resualt.
	    #mb.z.run.insert := false;
	    #mb.z.com.insert_id := #mb.z.com.insert_id + 1;
	    
	    // If the query is finnished. (with or without error)  
	ELSIF #mb.stat.done_or_error THEN
	    
	    // Make sure that the query resault really belong to this query.   
	    IF #mb.z.q.unit = #unit
	        AND #mb.z.q.fc = #fc
	        AND #mb.z.q.d_addr = #d_addr
	        AND #mb.z.q.d_len = #tLen
	    THEN
	        
	        IF #mb.stat.done // Successfull query (no error)
	            AND NOT #mb.z.run.write  // If it's a read query
	            AND #mb.conf.buffer_handler
	        THEN
	            // Copy the content from the buffer to "#data"
	            "mb_buffer_handler"(action := 3, // 3=Read                
	                                data := #data,
	                                bytes := #tBytes,
	                                buffer := #mb.z.buffer);
	        END_IF;
	        #mb.stat.query_above := true;
	        
	        // Temperary store the d_addr for debugging. 
	        // mb_device_footer will save it in #comman.log.error_d_addr
	        #mb.z.com.recived_d_addr := #d_addr;
	        
	        // recive_id is used inside device_header and device_footer.
	        // if change between them, then it can be determined that the
	        // device has receved an answeer from a query.
	        #mb.z.com.recive_id := #mb.z.com.recive_id + 1;
	    END_IF;
	    #mb.z.q.qid := #mb.z.q.qid + 1; // Move on to next query
	    #mb.z.run.insert := true; // Prepare for the next query.
	END_IF;
	
END_FUNCTION

FUNCTION "mb_device_header" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
   VAR_IN_OUT 
      common : "udt_mb_common";   // Common
      mb : "udt_mb";   // udt mb
   END_VAR


BEGIN
	// Device id cnt. The first device has id "1". Increased in every
	// mb_device_header, reseted in mb_client_ctrl or mb_master_ctrl.
	#mb.z.com.did_cnt := #mb.z.com.did_cnt + 1;
	
	// Take a snap shot of the recive_id and insert_id.
	#common.z.insert_id := #mb.z.com.insert_id;
	#common.z.recive_id := #mb.z.com.recive_id;
	// A mb_query FC between mb_device_header and mb_device_footer, will
	// change the insert_id and the recive_id if a intermediate query is
	// executed. By compare insert_id in the mb-udt and the device-udt at
	// mb_device_footer, it can be determined if a query bellonging to this
	// devices has recived it's resualt and if new query has insert it's
	// query-params.
	
	// When #mb.mb.q.qid = #mb.mb.run.qid_cnt => "This" device has the
	// query-token !
	
	// - If the query-token points at this device header, or it point to a
	//   query in the previous device, that is surrounded by a if-statement
	//   and the statement is now false.
	// - A gid change can only be done if insert, done or error is set,
	//   this is to avoid a resualt from one query being intercepted by
	//   another
	IF #mb.z.q.qid > #mb.z.run.qid_cnt
	    AND #mb.z.q.qid <= #common.z.header_qid
	    AND NOT #mb.z.run.busy
	THEN
	    // Reset.
	    #mb.z.run.insert := true;
	    #mb.conf.buffer_handler := true;
	    
	    // At first the offset_qid points at the first query of this
	    // device. When it has executed the offset will point at the
	    // second query. When all queries has executed the offset will
	    // be reset back to the first query. (in mb_device_footer) 
	    #mb.z.q.qid := #common.z.header_qid
	    + SEL(G := #common.conf.exec_all_quries,
	          IN0 := #common.z.offset_qid,
	          IN1 := 1);
	END_IF;
	
	// - The code below is reduce the impact of setting a if-statement
	//   around queries, by setting the qid_cnt to a fixed value at this 
	//   point.
	// - mb_device_header will occupy some query-id's. (Can be configured)
	#common.z.header_qid := MAX(
	                            IN1 := #mb.z.run.qid_cnt + 1,
	                            IN2 := #common.z.header_qid);
	#mb.z.run.qid_cnt := #common.z.header_qid;
	
	
	
	
END_FUNCTION

