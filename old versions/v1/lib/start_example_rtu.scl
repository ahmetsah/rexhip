FUNCTION_BLOCK "abb_aquaMaster_3"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      unit : USInt;
   END_VAR

   VAR_IN_OUT 
      mb : "udt_mb";
   END_VAR

   VAR 
      common : "udt_mb_common";
      flow : Real;
      pressure : Real;
      totaliser : Struct
         fwd : DWord;
         rev : DWord;
         net : DWord;
      END_STRUCT;
   END_VAR


BEGIN
	// - ABB - AquaMaster 3 - Electromagnetic flowmeter
	// - COI/FET2XX/MOD/TBLâ€“EN
	// - https://library.e.abb.com/public/91eead459bb0d349c12577fc0033d2b5/COI_FET2XX_MOD_TBL-EN.pdf
	
	// - Example code, no test with real equipment done.
	
	"mb_device_header"(common := #common, mb := #mb);
	
	"mb_query"(unit := #unit,
	           fc := #mb.c.read.input_reg,
	           d_addr := 5017,
	           d_len := 2,
	           data := #flow,
	           mb := #mb);
	
	"mb_query"(unit := #unit,
	           fc := #mb.c.read.input_reg,
	           d_addr := 5025,
	           d_len := 2,
	           data := #pressure,
	           mb := #mb);
	
	"mb_query"(unit := #unit,
	           fc := #mb.c.read.holding_reg,
	           d_addr := 12003,
	           d_len := #mb.c.auto_len,
	           data := #totaliser,
	           mb := #mb);
	
	"mb_device_footer"(common := #common, mb := #mb);
	
	IF #common.out.communication_error THEN
	    #flow := 0;
	    #pressure := 0;
	END_IF;
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "start_example_mb_rtu"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR 
      mb : "udt_mb";
      mb_master_ctrl : "mb_master_ctrl";
      example_abb_aquaMaster_3_device1 : "abb_aquaMaster_3";
      example_abb_aquaMaster_3_device2 : "abb_aquaMaster_3";
      example_abb_aquaMaster_3_device3 : "abb_aquaMaster_3";
      resault_data_1 : Word;
   END_VAR


BEGIN
	// hardware_id:     Can be found inside the hardware configuration.
	// baud:            bits per secound. (parity is even by default)
	// timeout:         Rule of thumb when setting the timeout:
	//                  Timeout [ms] = 3000000 / buad_rate
	// mb:              A udt that is the link between the controller and it's
	//                  belonging queries inside the device block bellow.                 
	#mb_master_ctrl(hardware_id := "Local~CB_1241_(RS485)",
	                baud := 9600,
	                timeout := T#500ms,
	                mb := #mb);
	
	// In this rtu example there are 3 devices (units) connected to the
	// modbus rtu bus. Each instance of the blocks bellow represent one
	// device on the bus. A "device block" has to be created for each
	// spesific modbus device.
	
	// Two abb aqua master's. (unit => device address)
	#example_abb_aquaMaster_3_device1(unit := 11, mb := #mb);
	#example_abb_aquaMaster_3_device2(unit := 12, mb := #mb);
	#example_abb_aquaMaster_3_device2(unit := 13, mb := #mb);
	
	// Keep in mind that a device block can be used both for both modbus rtu
	// and tcp. This is specially useful if a tcp-rtu-gateway is used.
	// The same program could be used, just swap the rtu controller, with
	// the tcp controller.
	
	
	// Read holding register 456 from device with unit address 123. This
	// is an example showing that a query does not necessarily need to be
	// inside a device block as obove, however making reusable device
	// blocks is good practice.
	"mb_query"(unit := 123,
	           fc := #mb.c.read.holding_reg,
	           d_addr := 456,
	           d_len := #mb.c.auto_len,
	           data := #resault_data_1,
	           mb := #mb);
	
END_FUNCTION_BLOCK

DATA_BLOCK "start_example_mb_rtu_DB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
"start_example_mb_rtu"

BEGIN

END_DATA_BLOCK

ORGANIZATION_BLOCK "rtu_ob"
TITLE = "Main Program Sweep (Cycle)"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1

BEGIN
	// Program cycle OB
	
	// Open the block to see the example.
	
	"start_example_mb_rtu_DB"();
	
	
END_ORGANIZATION_BLOCK

