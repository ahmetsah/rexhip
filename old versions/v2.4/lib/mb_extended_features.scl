FUNCTION "mb_dataptr_eq_buffer" : Bool
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      data_ptr : Variant;
      mb_query : "mb_query";
   END_VAR

   VAR_TEMP 
      tmp_buffer : Array[0..250] of Byte;
      pos : DInt;
      c : Int;
      e : Int;
   END_VAR


BEGIN
	// Most use cases will not need this function !
	// Example:
	// 
	// #mb_query(mb_addr := 123,
	//           mode := #mb_query.c.write.holding_reg,
	//           data_addr := 456,
	//           data_ptr := #data);
	//
	// IF #mb_query.Done AND
	//     "mb_dataPtr_eq_buffer"(data_ptr := #data, mb_query := #mb_query)
	// THEN
	//      // If there are for some reason two write queries that has exatly
	//      // the same parameters, then the Done-flag may not be enough to
	//      // determine which query has been executed. To compare data as
	//      // well, data_ptr to the buffer, then this use this function. It
	//      // will return true if the content is the same.
	// END_IF;
	//
	// ------- 
	
	#mb_dataptr_eq_buffer := true; // Init. value
	
	#e := Serialize(SRC_VARIABLE := #data_ptr,
	                DEST_ARRAY => #tmp_buffer,
	                POS := #pos);
	
	// Looking for differences.
	FOR #c := 0 TO #pos - 1 DO
	    IF #tmp_buffer[#c] <> #mb_query.z.buffer[#c] THEN
	        #mb_dataptr_eq_buffer := false;
	        EXIT;
	    END_IF;
	END_FOR;
	
END_FUNCTION

FUNCTION "mb_execute" : Bool
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      mb_query : "mb_query";
   END_VAR

   VAR_TEMP 
      dommy : Bool;
   END_VAR


BEGIN
	// Most use cases will not need this function !
	// Example:
	// 
	// IF "mb_execute"(#mb_query) THEN
	//     
	//     // Preparing calculations.
	//     
	//     #mb_query(data_addr := 2, data_ptr := #data);
	// END_IF;
	//
	// Usefull if some CPU demanding calculation need to be done
	// before a write query is inserted. Note that a query can later
	// be aborted, thought mb_execute return true.
	
	#mb_execute := #mb_query.z.run.qid_cnt + 1 = #mb_query.z.run.qid
	(* *)AND NOT #mb_query.stat.busy;
	
	IF NOT #mb_execute THEN
	    #mb_query(data_ptr := #dommy);
	END_IF;
	
END_FUNCTION

FUNCTION "mb_query_bits" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      data_ptr : Array[*] of Bool;
      mb_query : "mb_query";
   END_VAR

   VAR_TEMP 
      discrete : Bool;
      dommy : Bool;
      lower : DInt;
      upper : DInt;
      bits : UInt;
      bytes : UDInt;   // bytes
   END_VAR


BEGIN
	// This function should be used when the number of bits dosen't
	// add up to whole bytes, for function codes: 1, 2, 5 and 15. 
	// 
	// data_ptr need to be a one dimensional array of bools.
	// --- --- ---
	
	IF #mb_query.z.run.qid_cnt + 1 <> #mb_query.z.run.qid
	    OR #mb_query.stat.busy
	THEN
	    // Skip query, qid will not match qid_cnt and
	    // my_query will return.
	    #mb_query(data_ptr := #dommy);
	    RETURN;
	END_IF;
	
	// Some preparing calculations.
	CASE #mb_query.mode OF // A discrete query ?
	    101, 102, 105, 115:
	        #discrete := true;
	    0..2:
	        CASE #mb_query.data_addr OF
	            1..9999, 10001..19999:
	                #discrete := true;
	        END_CASE;
	END_CASE;
	#lower := LOWER_BOUND(ARR := #data_ptr, DIM := 1);
	#upper := UPPER_BOUND(ARR := #data_ptr, DIM := 1);
	#bits := DINT_TO_UINT(#upper - #lower + 1); // Elements in array.
	
	// Auto data len ?
	IF #mb_query.data_len = #mb_query.c.auto_len THEN
	    #bytes := (#bits + 7) / 8; // CEIL()
	    #mb_query.data_len := SEL(G := #discrete,
	                              IN0 := (#bits + 15) / 16, // CEIL()
	                              IN1 := #bits);
	ELSE
	    #bytes := SEL(G := #discrete,
	                  IN0 := #mb_query.data_len * 2, // 1 word -> 2 bytes
	                  IN1 := (#mb_query.data_len + 7) / 8); // CEIL()
	END_IF;
	
	// Insert query.
	IF #mb_query.z.run.insert THEN
	    CASE #mb_query.mode OF
	        1, 2, 105, 106, 115, 116: // A write query.
	            // Copy the content from data_ptr to the buffer.
	            GATHER_BLK(IN := #data_ptr[#lower],
	                       COUNT_OUT := #bytes,
	                       OUT => #mb_query.z.buffer[0]);
	    END_CASE;
	END_IF;
	
	// Disable buf.h. inside mb_query.
	#mb_query.conf.buffer_handler := false;
	
	// Run the query.
	#mb_query(data_ptr := #dommy);
	
	#mb_query.conf.buffer_handler := true; // Enable buf.h. again.
	#mb_query.data_len := #mb_query.c.auto_len; // Back to auto.
	
	// Handle resualt.
	IF #mb_query.Done // The query above.
	    AND NOT #mb_query.z.run.write  // A read query
	THEN
	    // Copy the content from the buffer to data_ptr.
	    SCATTER_BLK(IN := #mb_query.z.buffer[0],
	                COUNT_IN := #bytes,
	                OUT => #data_ptr[#lower]);
	END_IF;
	
END_FUNCTION

FUNCTION_BLOCK "mb_delay"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      delay : Time;
   END_VAR

   VAR_IN_OUT 
      mb_query : "mb_query";
   END_VAR

   VAR 
      "timer" {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TON_TIME;
      qid { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UInt := 1;
      wait : Bool;
   END_VAR


BEGIN
	// For use with modbus tcp, so the client dosen't jam a network.
	// The function halt execution of queries for a certain time
	
	#mb_query.z.run.qid_cnt += 1;  // The timer occupy one qid.
	
	IF #wait THEN // If the timer has been activated.
	    #timer(IN := true,
	           PT := #delay);
	    IF #timer.Q THEN
	        #mb_query.z.run.qid := #qid + 1;
	        RESET_TIMER(#timer);
	        #wait := false;
	    END_IF;
	ELSIF #mb_query.z.run.qid_cnt = #mb_query.z.run.qid
	    AND NOT #mb_query.stat.busy
	THEN
	    #qid := #mb_query.z.run.qid; // Store the value
	    #mb_query.z.run.qid := 0; // Stop exec.
	    #wait := true;
	END_IF;
END_FUNCTION_BLOCK

