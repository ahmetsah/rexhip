FUNCTION_BLOCK "siemens_PAC3200"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      mb_addr : USInt := 1;
   END_VAR

   VAR_IN_OUT 
      mb_query : "mb_query";
   END_VAR

   VAR 
      sb : "mb_station_block_udt";
      query_1 : Struct
         voltage_L_n : Array[1..3] of Real;
         "voltage _L_L" : Array[1..3] of Real;   // 1:Va-b, 2:Vb-c, 3:Vc-a,
         current : Array[1..3] of Real;
         apparent_power : Array[1..3] of Real;
         active_power : Array[1..3] of Real;
         reactive_power : Array[1..3] of Real;
         power_factor : Array[1..3] of Real;
         THD_R_voltage : Array[1..3] of Real;
      END_STRUCT;
      query_2 : Struct
         frequency : Real;   // unit: hz
         avg_voltage_Vph_n : Real;   // unit: V
         avg_voltage_Vph_ph : Real;   // unit: V
         avg_current : Real;   // unit: A
         total_apparent_power : Real;   // unit: VA
         total_active_power : Real;   // unit: W
      END_STRUCT;
      query_3 : Struct
         serial_number : String[16];
      END_STRUCT;
   END_VAR


BEGIN
	// - Siemens - PAC3200 - Power meter
	// - http://w3.siemens.com.br/buildingtechnologies/br/
	//   documents/manual-sentron-pac3200.pdf
	//   3.9.3, page 40
	
	"mb_station_block_header"(sb := #sb, mb_query := #mb_query);
	#mb_query.mb_addr := #mb_addr; // Device address.
	
	// Tree queries, reading one section of holding registers each.
	#mb_query.mode := #mb_query.c.read.holding_reg;
	#mb_query(data_addr := 1, data_ptr := #query_1);
	#mb_query(data_addr := 55, data_ptr := #query_2);
	#mb_query(data_addr := 64012, data_ptr := #query_3);
	
	// - Data length is automatically calculated for holding 
	//   and input regisers. 
	// - mb_query_bits should be used for discrete in- and outpus.
	
	"mb_station_block_footer"(sb := #sb, mb_query := #mb_query);
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "start_example_modbus_tcp"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR 
      mb_query : "mb_query";
      mb_client_ctrl : "mb_client_ctrl";
      siemens_PAC3200 : "siemens_PAC3200";
      ip : Array[1..4] of Byte;
      mb_delay_between_queries : "mb_delay_between_queries";
   END_VAR


BEGIN
	// IP-address of the modbus server
	#ip[1] := 192;
	#ip[2] := 168;
	#ip[3] := 1;
	#ip[4] := 2;
	
	// interface:  Profinet interface.
	//             (Find const. inside "Device configuration")
	// conn_id:    A unique id for each tcp connectin in the plc.
	// ip_addr:    The ip-address of the server. (Array of 4 bytes)
	// tcp_port:   Default port is 502. (UDP isn't available)
	// timeout:    Depends on the network conncetion.
	// mb_query:   The query FB.
	#mb_client_ctrl(interface := "Local~PROFINET_interface_1",
	                conn_id := 123,
	                ip_addr := #ip,
	                tcp_port := 502,
	                timeout := T#400ms,
	                mb_query := #mb_query);
	
	#siemens_PAC3200(mb_query := #mb_query); 
	
	// Delay the query execution, this prevent the plc from
	// jamming the network. Adjust the time to your need.
	#mb_delay_between_queries(delay := T#500ms, mb_query := mb_query);
	
	// Modbus rtu blocks can be deleted to save memory. 
	
END_FUNCTION_BLOCK

DATA_BLOCK "start_example_modbus_tcp_DB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
"start_example_modbus_tcp"

BEGIN

END_DATA_BLOCK

ORGANIZATION_BLOCK "tcp_ob"
TITLE = "Main Program Sweep (Cycle)"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1

BEGIN
	// Program cycle OB
	
	// Open the block to see the example.
	"start_example_modbus_tcp_DB"();
	
	
	
END_ORGANIZATION_BLOCK

