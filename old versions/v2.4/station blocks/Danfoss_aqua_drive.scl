FUNCTION_BLOCK "DanfossAquaDrive"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      mb_addr : USInt;
      iRef : Real;   // 0-100 %
      iStop_cost : Bool;
      iStop_ramp : Bool;
      iStop_quick : Bool;
   END_VAR

   VAR_OUTPUT 
      qHz : Real;
      qCurrent : Real;
      qIn_operation : Bool;
      qReady : Bool;
      qError : Bool;
   END_VAR

   VAR_IN_OUT 
      mb_query : "mb_query";
   END_VAR

   VAR 
      sb : "mb_station_block_udt";
      serial_number : String[20];
      ctw : Struct
         x08 : Bool;
         x09 : Bool;
         x10_data_valid : Bool := TRUE;
         x11 : Bool;
         x12 : Bool;
         x13 : Bool;
         x14 : Bool;
         x15_reverse : Bool;
         x00 : Bool;
         x01 : Bool;
         x02_inv_stop_ramp : Bool := TRUE;
         x03_inv_stop_coasting : Bool := TRUE;
         x04_inv_stop_quick : Bool := TRUE;
         x05_inv_hold_output_frequency : Bool := TRUE;
         x06 : Bool;
         x07_reset : Bool;
      END_STRUCT;
      stw : Struct
         x08_Speed_eq_reference : Bool;
         x09_bus_control : Bool;
         x10_frequency_limit_ok : Bool;
         x11_in_operation : Bool;
         x12_stopped_auto_start : Bool;
         x13_voltage_exceeded : Bool;
         x14_torque_exceeded : Bool;
         x15_timer_exceeded : Bool;
         x00_control_ready : Bool;
         x01_drive_ready : Bool;
         x02_enable : Bool;   // 0=Coasting
         x03_trip : Bool;
         x04_error_no_trip : Bool;
         x05 : Bool;
         x06_triplock : Bool;
         x07_warning : Bool;
      END_STRUCT;
      basic : Struct
         rpm : DInt;
         hz : DInt;
         current : DInt;
      END_STRUCT;
      state : Int;
   END_VAR

   VAR_TEMP 
      "int" : Int;
      "real" : Real;
   END_VAR


BEGIN
	// Danfoss AQUA-drive FC 202
	//
	// Web: http://files.danfoss.com/documents/PE/doc_MG20N202.pdf
	//      http://files.danfoss.com/documents/PE/doc_MG20O602.pdf 
	
	"mb_station_block_header"(sb := #sb, mb_query := #mb_query);
	#mb_query.mb_addr := #mb_addr;
	
	CASE #state OF
	    0: // Action if no communication. (2=stop) 
	        #int := 2;
	        #mb_query(mode := #mb_query.c.write.holding_reg,
	                  data_addr := 8039, // 8*1000+4*10-1    
	                  data_ptr := #int); 
	    1: // Select input source (2=CTW=fieldbus)
	        #int := 2;
	        #mb_query(mode := #mb_query.c.write.holding_reg,
	                  data_addr := 8009, // 8*1000+1*10-1 
	                  data_ptr := #int);
	    2: // Serial number 
	        #mb_query(mode := #mb_query.c.read.holding_reg,
	                  data_addr := 15509, // 15*1000+51*10-1
	                  data_ptr := #serial_number);
	END_CASE;
	#state += BOOL_TO_INT(#mb_query.Done);
	#state := SEL(G := #state > 2 OR #sb.out.error_comm,
	              IN0 := #state, IN1 := 0);
	
	REGION Read 
	    #mb_query.mode := #mb_query.c.read.holding_reg;
	    
	    // Status word // 16*1000+3*10-1
	    #mb_query(data_addr := 16029, data_ptr := #stw);
	    #qReady := #stw.x01_drive_ready AND #stw.x00_control_ready;
	    #qIn_operation := #stw.x11_in_operation;
	    #qError := #stw.x04_error_no_trip AND #stw.x03_trip;
	    // Hz // 16*1000+13*10-1
	    #mb_query(data_addr := 16129, data_ptr := #basic.hz);
	    #qHz := DINT_TO_REAL(#basic.hz) * 0.1;
	    // Electrical current // 16*1000+14*10-1
	    #mb_query(data_addr := 16139, data_ptr := #basic.current);
	    #qCurrent := DINT_TO_REAL(#basic.current) * 0.01;
	    
	    (* // RPM // 16*1000+17*10-1
	    #mb_query(data_addr := 16169, data_ptr := #basic.rpm);
	    #out_rpm := DINT_TO_REAL(#basic.rpm) / 60; *)
	END_REGION
	
	REGION Write 
	    #mb_query.mode := #mb_query.c.write.holding_reg;
	    
	    // CTW (controll word) // 2810 - 1 = 2809
	    #ctw.x03_inv_stop_coasting := NOT #iStop_cost;
	    #ctw.x02_inv_stop_ramp := NOT #iStop_ramp;
	    #ctw.x04_inv_stop_quick := NOT #iStop_quick;
	    #mb_query(data_addr := 2809, data_ptr := #ctw);
	    // Preset reference // p.144 // 3*1000+10*10-1
	    #real := NORM_X_REAL(MIN := 0, VALUE := #iRef, MAX := 100);
	    #int := SCALE_X(MIN := 0, VALUE := #real, MAX := 16#4000);
	    #mb_query(data_addr := 3099, data_ptr := #int);
	END_REGION
	
	"mb_station_block_footer"(sb := #sb, mb_query := #mb_query);
	
END_FUNCTION_BLOCK
