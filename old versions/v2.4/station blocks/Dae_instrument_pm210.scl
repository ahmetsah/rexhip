FUNCTION_BLOCK "DAE_Instrument_PM210"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT DB_SPECIFIC
      mb_addr : USInt;
   END_VAR

   VAR_IN_OUT 
      mb_query : "mb_query";
   END_VAR

   VAR DB_SPECIFIC
      sb : "mb_station_block_udt";
   END_VAR
   VAR RETAIN
      conf : Struct
         write : Bool;
         PT_ratio : Real;
         CT_ratio : Real;
      END_STRUCT;
   END_VAR
   VAR 
      data1 : Struct
         voltage_Lx_N : Array[1..3] of Real;
         voltage_L_L : Array[1..3] of Real;
         current : Array[1..3] of Real;
         total_active_power : Real;
         total_reactive_power : Real;
         total_apparent_power : Real;
         frequency : Real;
         power_factor : Real;
         total_active_energy : Real;
         total_reactive_energy : Real;
         "15_minute_block_demand" : Real;
         "1_minute_block_demand" : Real;
         generator_total_active_energy : Real;
         generator_total_reactive_energy : Real;
      END_STRUCT;
      data2 : Struct
         energy_active { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // VA
            phase { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[1..3] of Real;
            total { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         END_STRUCT;
         energy_reactive { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
            phase { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[1..3] of Real;
            total { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         END_STRUCT;
         power_active { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
            phase { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[1..3] of Real;
            total { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         END_STRUCT;
         power_reactive { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
            phase { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[1..3] of Real;
            total { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         END_STRUCT;
         power_apparent { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
            phase { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[1..3] of Real;
            total { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         END_STRUCT;
         power_factor { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
            phase { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[1..3] of Real;
            total { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         END_STRUCT;
      END_STRUCT;
      read3_temperature { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      read4_io { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         digital_output { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
         digital_input { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      END_STRUCT;
      data5_generator_energy : Struct
         active { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
            phase { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[1..3] of Real;
            total { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         END_STRUCT;
         reactive { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
            phase { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[1..3] of Real;
            total { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         END_STRUCT;
      END_STRUCT;
   END_VAR

   VAR_TEMP 
      read1 : Struct
         voltage_Lx_N : Array[1..3] of UDInt;   // volt
         voltage_L_L : Array[1..3] of UDInt;   // volt 1:L1-L2, 2:L2-L3, 3:L3-L1
         current : Array[1..3] of UDInt;   // mA
         total_active_power : UDInt;
         total_reactive_power : UDInt;
         total_apparent_power : UDInt;
         frequency : UDInt;
         power_factor : DInt;
         total_active_energy : UDInt;
         total_reactive_energy : UDInt;
         "15_minute_block_demand" : UDInt;
         "1_minute_block_demand" : UDInt;
         generator_total_active_energy : UDInt;
         generator_total_reactive_energy : UDInt;
      END_STRUCT;
      read2 : Struct
         energy_active : Struct   // VA
            phase : Array[1..3] of UDInt;
            total : UDInt;
         END_STRUCT;
         energy_reactive : Struct
            phase : Array[1..3] of UDInt;
            total : UDInt;
         END_STRUCT;
         power_active : Struct
            phase : Array[1..3] of UDInt;
            total : UDInt;
         END_STRUCT;
         power_reactive : Struct
            phase : Array[1..3] of UDInt;
            total : UDInt;
         END_STRUCT;
         power_apparent : Struct
            phase : Array[1..3] of UDInt;
            total : UDInt;
         END_STRUCT;
         power_factor : Struct
            phase : Array[1..3] of Int;
            total : Int;
         END_STRUCT;
      END_STRUCT;
      read5_generator_energy : Struct
         active : Struct
            phase : Array[1..3] of UDInt;
            total : UDInt;
         END_STRUCT;
         reactive : Struct
            phase : Array[1..3] of UDInt;
            total : UDInt;
         END_STRUCT;
      END_STRUCT;
      write1 : Struct
         PT_ratio : UInt;
         CT_ratio : UInt;
      END_STRUCT;
      c : Int;
   END_VAR


BEGIN
	// DAE Instrument Corp. - PM210 
	// Multi-Function Panel Meter
	//
	// Default: 9600-8-N-1
	// 
	// http://www.daeinstrument.com/downloads/PM210%20Modbus%20Reference-2.6.1e.pdf
	
	"mb_station_block_header"(sb := #sb, mb_query := #mb_query);
	#mb_query.mb_addr := #mb_addr;
	
	#mb_query.mode := #mb_query.c.read.holding_reg;
	
	#mb_query(data_addr := 20, data_ptr := #read1);
	IF #mb_query.Done THEN
	    FOR #c := 1 TO 3 DO
	        #data1.voltage_Lx_N[#c] := UDINT_TO_REAL(ROR(IN := #read1.voltage_Lx_N[#c], N := 16)) * 0.1;
	        #data1.voltage_L_L[#c] := UDINT_TO_REAL(ROR(IN := #read1.voltage_L_L[#c], N := 16)) * 0.1;
	        #data1.current[#c] := UDINT_TO_REAL(ROR(IN := #read1.current[#c], N := 16)) * 0.001;
	    END_FOR; 
	    #data1.total_active_power := UDINT_TO_REAL(ROR(IN := #read1.total_active_power, N := 16));
	    #data1.total_reactive_power := UDINT_TO_REAL(ROR(IN := #read1.total_reactive_power, N := 16));
	    #data1.total_apparent_power := UDINT_TO_REAL(ROR(IN := #read1.total_apparent_power, N := 16));
	    #data1.frequency := UDINT_TO_REAL(ROR(IN := #read1.frequency, N := 16)) * 0.1;
	    #data1.power_factor := DINT_TO_REAL(ROR(IN := #read1.power_factor, N := 16)) * 0.001;
	    #data1.total_active_energy := UDINT_TO_REAL(ROR(IN := #read1.total_active_energy, N := 16)) * 0.01;
	    #data1.total_reactive_energy := UDINT_TO_REAL(ROR(IN := #read1.total_reactive_energy, N := 16)) * 0.01;
	    #data1."15_minute_block_demand" := UDINT_TO_REAL(ROR(IN := #read1."15_minute_block_demand", N := 16)) * 0.1;
	    #data1."1_minute_block_demand" := UDINT_TO_REAL(ROR(IN := #read1."1_minute_block_demand", N := 16)) * 0.1;
	    #data1.generator_total_active_energy := UDINT_TO_REAL(ROR(IN := #read1.generator_total_active_energy, N := 16)) * 0.01;
	    #data1.generator_total_reactive_energy := UDINT_TO_REAL(#read1.generator_total_reactive_energy) * 0.01;
	END_IF;
	
	#mb_query(data_addr := 80, data_ptr := #read2);
	IF #mb_query.Done THEN
	    FOR #c := 1 TO 3 DO
	        #data2.energy_active.phase[#c] := UDINT_TO_REAL(ROR(IN := #read2.energy_active.phase[#c], N := 16)) * 0.01;
	        #data2.energy_reactive.phase[#c] := UDINT_TO_REAL(ROR(IN := #read2.energy_reactive.phase[#c], N := 16)) * 0.01;
	        #data2.power_active.phase[#c] := UDINT_TO_REAL(ROR(IN := #read2.power_active.phase[#c], N := 16));
	        #data2.power_reactive.phase[#c] := UDINT_TO_REAL(ROR(IN := #read2.power_reactive.phase[#c], N := 16));
	        #data2.power_apparent.phase[#c] := UDINT_TO_REAL(ROR(IN := #read2.power_apparent.phase[#c], N := 16));
	        #data2.power_factor.phase[#c] := INT_TO_REAL(#read2.power_factor.phase[#c]) * 0.001;
	    END_FOR;
	    #data2.energy_active.total := UDINT_TO_REAL(ROR(IN := #read2.energy_active.total, N := 16)) * 0.01;
	    #data2.energy_reactive.total := UDINT_TO_REAL(ROR(IN := #read2.energy_reactive.total, N := 16)) * 0.01;
	    #data2.power_active.total := UDINT_TO_REAL(ROR(IN := #read2.power_active.total, N := 16));
	    #data2.power_reactive.total := UDINT_TO_REAL(ROR(IN := #read2.power_reactive.total, N := 16));
	    #data2.power_apparent.total := UDINT_TO_REAL(ROR(IN := #read2.power_apparent.total, N := 16));
	    #data2.power_factor.total := INT_TO_REAL(#read2.power_factor.total) * 0.001;
	END_IF;
	
	#mb_query(data_addr := 139, data_ptr := #read3_temperature);
	
	#mb_query(data_addr := 142, data_ptr := #read4_io);
	
	#mb_query(data_addr := 144, data_ptr := #read5_generator_energy);
	IF #mb_query.Done THEN
	    FOR #c := 1 TO 3 DO
	        #data5_generator_energy.active.phase[#c] := UDINT_TO_REAL(ROR(IN := #read5_generator_energy.active.phase[#c], N := 16)) * 0.01;
	        #data5_generator_energy.reactive.phase[#c] := UDINT_TO_REAL(ROR(IN := #read5_generator_energy.reactive.phase[#c], N := 16)) * 0.01;
	    END_FOR;
	    #data5_generator_energy.active.total := UDINT_TO_REAL(ROR(IN := #read5_generator_energy.active.total, N := 16)) * 0.01;
	    #data5_generator_energy.reactive.total := UDINT_TO_REAL(ROR(IN := #read5_generator_energy.reactive.total, N := 16)) * 0.01;
	END_IF;
	
	IF #conf.write THEN
	    #write1.PT_ratio := REAL_TO_UINT(#conf.PT_ratio * 100);
	    #write1.CT_ratio := REAL_TO_UINT(#conf.CT_ratio);
	    #mb_query(mode := #mb_query.c.write.holding_reg,
	              data_addr := 133,
	              data_ptr := #write1);
	    #conf.write := #conf.write AND NOT #mb_query.Done;
	END_IF;
	
	"mb_station_block_footer"(sb := #sb, mb_query := #mb_query);
	
END_FUNCTION_BLOCK

