FUNCTION_BLOCK "Ponsel_mesure"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      mb_addr : UInt;
      minimum_measurement_interval : Time := T#1M;
      compensate_enable : Bool;
      compensate : Array[1..2] of Real;
   END_VAR

   VAR_OUTPUT 
      measurement_ok : Bool;
   END_VAR

   VAR_IN_OUT 
      start_measurement : Bool;
      mb_query : "mb_query";
   END_VAR

   VAR 
      sb : "mb_station_block_udt";
      data1 : Struct
         value : Array[0..4] of Real;
         compensate_temperature : Real;
         compensate : Array[1..2] of Real;
         "_" : Word;
         status : Array[0..4] of Struct
            x08_StmGamme0 : Bool;
            x09_StmGamme1 : Bool;
            x10_StmGamme2 : Bool;
            x11 : Bool;
            x12 : Bool;
            x13 : Bool;
            x14 : Bool;
            x15 : Bool;
            x00_Stm0 : Bool;
            x01_Stm1 : Bool;
            x02_Stm2 : Bool;
            x03_StmTemp : Bool;   // At least one parameter coefficient uses a temporary calibration standard (configuration during calibration)
            x04_StmHF : Bool;   // At least one parameter coefficient is outside calibration limits
            x05_StmCU : Bool;   // All parameter coefficients use default coefficient
            x06_StmHIST : Bool;   // All parameter coefficients use history coefficient
            x07_StmME : Bool;   // Dry weight is missing in at least one parameter coefficient (measurement under way)
         END_STRUCT;
         Compensates_3 : Real;
      END_STRUCT;
      data2 : Struct
         Description : String[16];
         serial_number : String[16];   // (addr 0x0D10)
         Software_version : UInt;
         Hardware_version : UInt;
      END_STRUCT;
      state : Int;
      "timer" {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TON_TIME;
      timer_in : Bool;
      timer_q : Bool;
      first_measurement : Bool := TRUE;
      skip_sb : Bool;
   END_VAR

   VAR_TEMP 
      "word" : Word;
      c : Int;
      e : Bool;
   END_VAR


BEGIN
	// Aqualabo - Ponsel mesure
	// Dissolved oxygen (OPTOD), Conductivity (C4E, CTZ), pH_Redox, Turbi    
	// 
	// Warning: For the oxygen sensor each pull for sensor measurement, will reduce
	// the available life span. Please set the measurement interval to appropriate value.
	// 
	// Continuous assign true to start_measurement, to continuous do meassurements.
	// 
	// https://en.aqualabo.fr/userfiles/doc/User%20Manual%20Oxygen%20Optical%20digital%20sensor%20OPTOD.pdf
	
	"mb_station_block_header"(sb := #sb, mb_query := #mb_query);
	#mb_query.mb_addr := #mb_addr;
	#mb_query.mode := #mb_query.c.read.holding_reg;
	
	#timer(IN := #timer_in,
	       PT := #timer.PT,
	       Q => #timer_q);
	#timer_in := false;
	
	CASE #state OF
	    1:  // Compensate: Salinity, barometric pressure, temperature, etc. 
	        IF #compensate_enable THEN
	            #mb_query(mode := #mb_query.c.write.holding_reg,
	                      data_addr := 16#5f,
	                      data_ptr := #compensate);
	            #state += BOOL_TO_INT(#mb_query.Done);
	        ELSE
	            #state += 1;
	        END_IF;
	    2:  // Read wait-time
	        #mb_query(data_addr := 16#A4, data_ptr := #timer.PT);
	        #state += BOOL_TO_INT(#mb_query.Done);
	    3:  // Start all meassurements.
	        #word := 16#f;
	        #mb_query(mode := #mb_query.c.write.holding_reg,
	                  data_addr := 16#01,
	                  data_ptr := #word);
	        #state += BOOL_TO_INT(#mb_query.Done);	    
	    4:  // Timer (Wait while sensor is obtaining measurements)
	        #timer_in := true;
		#timer.PT := MAX(IN1 := #timer.PT, IN2 := T#2s);
	        #state += BOOL_TO_INT(#timer_q);
	    5:  // Get data.
	        #mb_query(data_addr := 16#0053, data_ptr := #data1);
	        #state += BOOL_TO_INT(#mb_query.Done);
	        // All measurements ok ?
	        FOR #c := 0 TO 4 DO
	            #e := #e
	            OR NOT #data1.status[#c].x00_Stm0
	            OR NOT #data1.status[#c].x01_Stm1
	            OR NOT #data1.status[#c].x02_Stm2;
	        END_FOR;
	        #measurement_ok := NOT #e;
	    6:  // Description, Serial number, sw and hw version.
	        #mb_query(data_addr := 16#0D00, data_ptr := #data2);
	        #state += BOOL_TO_INT(#mb_query.Done);
	    7:  // Finnish
	        // #start_measurement need to be assigned true again to start a new messurement.
	        #start_measurement := false;
	        #state := 0;
	    ELSE
	        #timer.PT := SEL(G := #first_measurement,
	                         IN0 := #minimum_measurement_interval,
	                         IN1 := T#1s);
	        #timer_in := true;
	        IF #start_measurement AND #timer_q THEN
	            #state := 1;
	            #first_measurement := false;
	        END_IF;
	END_CASE;
	
	"mb_station_block_footer"(sb := #sb, mb_query := #mb_query);
	
	IF #sb.out.error_comm THEN // If communication error
	    #first_measurement := true;
	    #state := 0;
	END_IF;
	
	(* 
	Units:
	---------------
	value0: Temperature
	                      value1:                    value2:                    value3:       
	OPTOD (oxygen)    :   Oxygen [%Sat]              Oxygen [mg/l]              Oxygen [ppm]
	Turbi             :   Nephelo turbidity [NTU]    Nephelo turbidity [FNU]    TU turbidity [mg/L]
	pH_Redox          :   pH                         Redox [mV]
	conductivity_C4E  :   Conductivity C4E [uS/cm]   Salinity [ppt]             TDS - Kcl [ppm]
	Conductivity_CTZ  :   Conductivity CTZ [mS/cm]   Salinity [g/Kg]            Conductivity CTZ [mS/cm] 
	                                                                            without temperature compensation                                                                  
	OPTOD: (Dissolved oxygen)
	Compensates[1]: Atmospheric pressure [hPa], default 1013 hPa
	Compensates[2]: Salinity [ppt], default 0 ppt
	
	
	Wiring: 
	Red     Wiring diagram V+
	black   Wiring diagram V-
	Green   B+ RS-485
	White   A- RS-485
	Blue    SDI-12
	
	
	StmX:
	000: Measurement OK
	001: Measurement OK, but out of specifications
	010: Measurement OK with INFO 1 (See datasheet)
	011: Measurement OK with INFO 2 (See datasheet)
	100: Measurement impossible, out of specifications
	101: Measurement impossible with INFO 3 (See datasheet)
	110: Measurement impossible with INFO 4 (See datasheet)
	111: measurement under way (not yet available)
	
	StmGamme:       
	001: measurement used range 1
	010: measurement used range 2
	011: measurement used range 3
	100: measurement used range 4
	
	*)
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "Ponsel_mesure_Conductivity_C4E"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      mb_addr : UInt := 255;   // 255=broadcast
   END_VAR

   VAR_OUTPUT 
      Temperature : Real;   // [degree C]
      Conductivity : Real;   // [uS/cm]
      Salinity : Real;   // [ppt]
      TDS_Kcl : Real;   // [ppm]
      measurement_ok : Bool;
   END_VAR

   VAR_IN_OUT 
      start : Bool;
      mb_query : "mb_query";
   END_VAR

   VAR 
      ponsel_mesure : "Ponsel_mesure";
   END_VAR


BEGIN
	// Ponsel mesure - Conductivity_C4E
	
	#start := true; // Continuous measurements
	
	#ponsel_mesure.minimum_measurement_interval := T#1s;
	#ponsel_mesure(mb_addr := #mb_addr,
	               compensate_enable := false,
	               measurement_ok => #measurement_ok,
	               start_measurement := #start,
	               mb_query := #mb_query);
	
	#Temperature := #ponsel_mesure.data1.value[0];  // [degree C]
	#Conductivity := #ponsel_mesure.data1.value[1]; // [uS/cm]
	#Salinity := #ponsel_mesure.data1.value[2];     // [ppt]
	#TDS_Kcl := #ponsel_mesure.data1.value[3];      // [ppm]
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "Ponsel_mesure_Dissolved_oxygen"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      mb_addr : UInt := 255;   // 255=broadcast
      continuously_measurements : Bool := TRUE;   // (Else use start to init messurements)
      measurement_interval : Time := T#1M;
      compensate_atmospheric_pressure : Real := 1013.0;   // hPa
      compensate_salinity : Real := 0.0;   // ppm
   END_VAR

   VAR_OUTPUT 
      Temperature : Real;
      Oxygen_Sat : Real;   // [%]
      Oxygen_mgl : Real;   // [mg/L]
      Oxygen_ppm : Real;   // [ppm]
      measurement_ok : Bool;
   END_VAR

   VAR_IN_OUT 
      mb_query : "mb_query";
   END_VAR

   VAR 
      ponsel_mesure : "Ponsel_mesure";
      start { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
   END_VAR


BEGIN
	// Aqualabo - Ponsel mesure
	// Dissolved oxygen (OPTOD)
	// 
	// Warning: Each pull for sensor measurement, will reduce the available 
	// life span. Please set the measurement interval to appropriate value.
	
	IF #continuously_measurements THEN
	    #start := true; // #measurement_interval will define intervals.
	END_IF;
	
	#ponsel_mesure.minimum_measurement_interval := #measurement_interval;
	#ponsel_mesure.compensate[1] := #compensate_atmospheric_pressure;
	#ponsel_mesure.compensate[2] := #compensate_salinity;
	#ponsel_mesure(mb_addr := #mb_addr, 
	               compensate_enable := true,
	               measurement_ok => #measurement_ok,
	               start_measurement := #start,
	               mb_query := #mb_query);
	
	#Temperature := #ponsel_mesure.data1.value[0]; // degree C
	#Oxygen_Sat := #ponsel_mesure.data1.value[1];  // [%]
	#Oxygen_mgl := #ponsel_mesure.data1.value[2];  // [mg/l]
	#Oxygen_ppm := #ponsel_mesure.data1.value[3];  // [ppm]
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "Ponsel_mesure_example"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR 
      mb_master_1200_ctrl : "mb_master_1200_ctrl";
      mb_query { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "mb_query";
      conductivity_C4E : "Ponsel_mesure_Conductivity_C4E";
      oxygen_sensor1 : "Ponsel_mesure_Dissolved_oxygen";
      oxygen_sensor2 : "Ponsel_mesure_Dissolved_oxygen";
      oxygen_sensor3 : "Ponsel_mesure_Dissolved_oxygen";
      measurement_interval : Time;
   END_VAR


BEGIN
	#mb_master_1200_ctrl.conf.parity := 0; // None
	#mb_master_1200_ctrl(hardware_id := "Local~CB_1241_(RS485)",
	                     baud := 9600,
	                     timeout := T#500ms,
	                     mb_query := #mb_query);
	
	// Salinity measurement for compensation for oxygen sensors.
	#conductivity_C4E(mb_addr := 1,
	                  mb_query := #mb_query);
	
	// Warning: Each pull for oxygen sensor measurement, will reduce
	// the available life span. Please set the measurement interval
	// to appropriate value.
	#measurement_interval := T#1M;
	
	#oxygen_sensor1(mb_addr := 2,
	                measurement_interval := #measurement_interval,
	                compensate_salinity := #conductivity_C4E.Salinity,
	                mb_query := #mb_query);
	
	#oxygen_sensor2(mb_addr := 3,
	                measurement_interval := #measurement_interval,
	                compensate_salinity := #conductivity_C4E.Salinity,
	                mb_query := #mb_query);
	
	#oxygen_sensor3(mb_addr := 4,
	                measurement_interval := #measurement_interval,
	                compensate_salinity := #conductivity_C4E.Salinity,
	                mb_query := #mb_query);
	
	(* Wiring: 
	Red     Wiring diagram V+
	black   Wiring diagram V-
	Green   B+ RS-485
	White   A- RS-485
	Blue    SDI-12    *)
	
END_FUNCTION_BLOCK

