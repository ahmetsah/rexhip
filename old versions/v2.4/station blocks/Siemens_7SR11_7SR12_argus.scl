FUNCTION_BLOCK "Siemens_7SR11_7SR12_argus"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      mb_addr : USInt := 1;
   END_VAR

   VAR_OUTPUT 
      out1 : Struct
         primary_Voltage_L_L : Array[1..3] of Real;
         primary_Voltage_L_N : Array[1..3] of Real;
         secondary_Voltage_L_N : Array[1..3] of Real;
      END_STRUCT;
      out2 : Struct
         nominal_voltage_degrees_L_L : Array[1..3] of Real;
         nominal_voltage_degrees_L_N : Array[1..3] of Real;
         Vzps : Real;
         Vpps : Real;
         Vnps : Real;
         Vzps_degree : Real;
         Vpps_degree : Real;
         Vnps_degree : Real;
         frequency : Real;
      END_STRUCT;
      out3 : Struct
         primary_current : Array[1..3] of Real;
         secondary_current : Array[1..3] of Real;
         nominal_current : Array[1..3] of Real;
         nominal_current_degrees : Array[1..3] of Real;
         primary_In : Real;
         secondary_In : Real;
         nominal_In : Real;
         primary_Ig : Real;
         secondary_Ig : Real;
         nominal_Ig : Real;
         nominal_Izps : Real;
         nominal_Ipps : Real;
         nominal_Inps : Real;
         nominal_Izps_degrees : Real;
         nominal_Ipps_degrees : Real;
         nominal_Inps_degrees : Real;
      END_STRUCT;
      out4 : Struct
         active_power : Array[1..3] of Real;
         active_power_tot : Real;
         reactive_power : Array[1..3] of Real;
         reactive_power_tot : Real;
         apparent_power : Array[1..3] of Real;
         apparent_power_tot : Real;
         power_factor : Array[1..3] of Real;
         power_factor_tot : Real;
      END_STRUCT;
   END_VAR

   VAR_IN_OUT 
      mb_query : "mb_query";
   END_VAR

   VAR 
      sb : "mb_station_block_udt";
      out5 : Struct
         act_energy_exp : UDInt;
         act_energy_imp : UDInt;
         react_energy_exp : UDInt;
         react_energy_imp : UDInt;
         thermal_status_Ph_A : UInt;
         thermal_status_Ph_B : UInt;
         thermal_Status_Ph_C : UInt;
      END_STRUCT;
      out6 : Struct
         fault_records : Real;
         event_records : Real;
         waveform_records : Real;
         secondary_voltage : Array[1..3] of Real;
      END_STRUCT;
   END_VAR

   VAR_TEMP 
      c : Int;
      read1 : Struct
         primary_Voltage_L_L : Array[1..3] of UDInt;
         primary_Voltage_L_N : Array[1..3] of UDInt;
         secondary_Voltage_L_N : Array[1..3] of UDInt;
      END_STRUCT;
      read2 : Struct
         nominal_voltage_degrees_L_L : Array[1..3] of UDInt;
         nominal_voltage_degrees_L_N : Array[1..3] of UDInt;
         Vzps : UDInt;
         Vpps : UDInt;
         Vnps : UDInt;
         Vzps_degree : UDInt;
         Vpps_degree : UDInt;
         Vnps_degree : UDInt;
         frequency : UDInt;
      END_STRUCT;
      read3 : Struct
         primary_current : Array[1..3] of UDInt;
         secondary_current : Array[1..3] of UDInt;
         nominal_current : Array[1..3] of UDInt;
         nominal_current_degrees : Array[1..3] of UDInt;
         primary_In : UDInt;
         secondary_In : UDInt;
         nominal_In : UDInt;
         primary_Ig : UDInt;
         secondary_Ig : UDInt;
         nominal_Ig : UDInt;
         nominal_Izps : UDInt;
         nominal_Ipps : UDInt;
         nominal_Inps : UDInt;
         nominal_Izps_degrees : UDInt;
         nominal_Ipps_degrees : UDInt;
         nominal_Inps_degrees : UDInt;
      END_STRUCT;
      read4 : Struct
         active_power : Array[1..3] of UDInt;
         active_power_tot : UDInt;
         reactive_power : Array[1..3] of UDInt;
         reactive_power_tot : UDInt;
         apparent_power : Array[1..3] of UDInt;
         apparent_power_tot : UDInt;
         power_factor : Array[1..3] of UDInt;
         power_factor_tot : UDInt;
      END_STRUCT;
      read6 : Struct
         fault_records : UDInt;
         event_records : UDInt;
         waveform_Records : UDInt;
         secondary_voltage : Array[1..3] of UDInt;
      END_STRUCT;
   END_VAR


BEGIN
	// Siemens - 7SR11 & 7SR12 - Argus - Overcurrent Relay
	// Energy Management
	//  
	// - https://cache.industry.siemens.com/dl/files/284/109747284/
	//   att_928907/v1/7SR12_Argus_Complete_Technical_Manual.pdf
	//   ==> page 212  
	
	"mb_station_block_header"(sb := #sb, mb_query := #mb_query);
	#mb_query.mb_addr := #mb_addr;
	
	#mb_query.mode := #mb_query.c.mode.read;
	
	#mb_query(data_addr := 40010, data_ptr := #read1);
	IF #mb_query.Done THEN
	    FOR #c := 1 TO 3 DO
	        #out1.primary_Voltage_L_L[#c] := UDINT_TO_REAL(#read1.primary_Voltage_L_L[#c]) / 1000;
	        #out1.primary_Voltage_L_N[#c] := UDINT_TO_REAL(#read1.primary_Voltage_L_N[#c]) / 1000;
	        #out1.secondary_Voltage_L_N[#c] := UDINT_TO_REAL(#read1.secondary_Voltage_L_N[#c]) / 1000;
	    END_FOR;
	END_IF;
	
	#mb_query(data_addr := 40034,
	          data_ptr := #read2);
	IF #mb_query.Done THEN
	    FOR #c := 1 TO 3 DO
	        #out2.nominal_voltage_degrees_L_L[#c] := UDINT_TO_REAL(#read2.nominal_voltage_degrees_L_L[#c]) / 1000;
	        #out2.nominal_voltage_degrees_L_N[#c] := UDINT_TO_REAL(#read2.nominal_voltage_degrees_L_N[#c]) / 1000;
	    END_FOR;
	    #out2.Vzps := UDINT_TO_REAL(#read2.Vzps) / 1000;
	    #out2.Vpps := UDINT_TO_REAL(#read2.Vpps) / 1000;
	    #out2.Vnps := UDINT_TO_REAL(#read2.Vnps) / 1000;
	    #out2.Vzps_degree := UDINT_TO_REAL(#read2.Vzps_degree) / 1000;
	    #out2.Vpps_degree := UDINT_TO_REAL(#read2.Vpps_degree) / 1000;
	    #out2.Vnps_degree := UDINT_TO_REAL(#read2.Vnps_degree) / 1000;
	    #out2.frequency := UDINT_TO_REAL(#read2.frequency) / 1000;
	END_IF;
	
	#mb_query(data_addr := 40064, data_ptr := #read3);
	IF #mb_query.Done THEN
	    FOR #c := 1 TO 3 DO
	        #out3.primary_current[#c] := UDINT_TO_REAL(#read3.primary_current[#c]) / 1000;
	        #out3.secondary_current[#c] := UDINT_TO_REAL(#read3.secondary_current[#c]) / 1000;
	        #out3.nominal_current[#c] := UDINT_TO_REAL(#read3.nominal_current[#c]) / 1000;
	        #out3.nominal_current_degrees[#c] := UDINT_TO_REAL(#read3.nominal_current_degrees[#c]) / 1000;
	    END_FOR;
	    #out3.primary_In := UDINT_TO_REAL(#read3.primary_In) / 1000;
	    #out3.secondary_In := UDINT_TO_REAL(#read3.secondary_In) / 1000;
	    #out3.nominal_In := UDINT_TO_REAL(#read3.nominal_In) / 1000;
	    #out3.primary_Ig := UDINT_TO_REAL(#read3.primary_Ig) / 1000;
	    #out3.secondary_Ig := UDINT_TO_REAL(#read3.secondary_Ig) / 1000;
	    #out3.nominal_Ig := UDINT_TO_REAL(#read3.nominal_Ig) / 1000;
	    #out3.nominal_Izps := UDINT_TO_REAL(#read3.nominal_Izps) / 1000;
	    #out3.nominal_Ipps := UDINT_TO_REAL(#read3.nominal_Ipps) / 1000;
	    #out3.nominal_Inps := UDINT_TO_REAL(#read3.nominal_Inps) / 1000;
	    #out3.nominal_Izps_degrees := UDINT_TO_REAL(#read3.nominal_Izps_degrees) / 1000;
	    #out3.nominal_Ipps_degrees := UDINT_TO_REAL(#read3.nominal_Ipps_degrees) / 1000;
	    #out3.nominal_Inps_degrees := UDINT_TO_REAL(#read3.nominal_Inps_degrees) / 1000;
	END_IF;
	
	#mb_query(data_addr := 40112,
	          data_ptr := #read4);
	IF #mb_query.Done THEN
	    FOR #c := 1 TO 3 DO
	        #out4.active_power[#c] := UDINT_TO_REAL(#read4.active_power[#c]) / 1000;
	        #out4.reactive_power[#c] := UDINT_TO_REAL(#read4.reactive_power[#c]) / 1000;
	        #out4.apparent_power[#c] := UDINT_TO_REAL(#read4.apparent_power[#c]) / 1000;
	        #out4.power_factor[#c] := UDINT_TO_REAL(#read4.power_factor[#c]) / 1000;
	    END_FOR;
	    #out4.active_power_tot := UDINT_TO_REAL(#read4.active_power_tot) / 1000;
	    #out4.reactive_power_tot := UDINT_TO_REAL(#read4.reactive_power_tot) / 1000;
	    #out4.apparent_power_tot := UDINT_TO_REAL(#read4.apparent_power_tot) / 1000;
	    #out4.power_factor_tot := UDINT_TO_REAL(#read4.power_factor_tot) / 1000;
	END_IF;
	
	#mb_query(data_addr := 40144, data_ptr := #out5);
	
	#mb_query(data_addr := 40167, data_ptr := #read6);
	IF #mb_query.Done THEN
	    FOR #c := 1 TO 3 DO
	        #out6.secondary_voltage[#c] := UDINT_TO_REAL(#read6.secondary_voltage[#c]) / 1000;
	    END_FOR;
	    #out6.fault_records := UDINT_TO_REAL(#read6.fault_records) / 1000;
	    #out6.event_records := UDINT_TO_REAL(#read6.event_records) / 1000;
	    #out6.waveform_records := UDINT_TO_REAL(#read6.waveform_Records) / 1000;
	END_IF;
	
	"mb_station_block_footer"(sb := #sb, mb_query := #mb_query);
	
END_FUNCTION_BLOCK

