FUNCTION "intreal" : LReal
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      mb_query : "mb_query";
      addr : UInt;
   END_VAR

   VAR_TEMP 
      dw : UDInt;
      r : DWord;
      bo : UDInt;
   END_VAR


BEGIN
	// Uniflo 1200 has a special datatype named
	// int-real, this block decode that data type.
	
	// buffer offset
	#bo := (#addr - #mb_query.data_addr) * 2;
	
	// The integer part of the value, little endian.
	#dw.%B3 := #mb_query.z.buffer[#bo + 0];
	#dw.%B2 := #mb_query.z.buffer[#bo + 1];
	#dw.%B1 := #mb_query.z.buffer[#bo + 2];
	#dw.%B0 := #mb_query.z.buffer[#bo + 3];
	#intreal := UDINT_TO_LREAL(#dw);
	
	// The decimal part of the value, little endian.
	// Stored as a real (IEEE754).
	#r.%B3 := #mb_query.z.buffer[#bo + 4];
	#r.%B2 := #mb_query.z.buffer[#bo + 5];
	#r.%B1 := #mb_query.z.buffer[#bo + 6];
	#r.%B0 := #mb_query.z.buffer[#bo + 7];
	#intreal += DWORD_TO_REAL(#r);
	
END_FUNCTION

FUNCTION_BLOCK "Floridan_Uniflo_1200"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      mb_addr : USInt;
      delay : Time := T#10s;
   END_VAR

   VAR_OUTPUT 
      energi : LReal;   // [MJ]
      vol_measured : LReal;   // [m3]
      vol_conv : LReal;   // [Nm3]
      pressure : LReal;   // [bar A]
      temperature : LReal;
      serial_number : String[6];
   END_VAR

   VAR_IN_OUT 
      mb_query : "mb_query";
   END_VAR

   VAR 
      sb : "mb_station_block_udt";
      battery_remaining : UInt;
      mb_delay : "mb_delay";
   END_VAR

   VAR_TEMP 
      dommy : Bool;
      c : Int;
      "dword" : DWord;
   END_VAR


BEGIN
	// Flonidan - Uniflo 1200 GVEC
	// Product number: 061864X-YYY
	//
	// - https://www.gavilar.nl/files/communicationboard230210_1521630740_b6a3b533.pdf
	// - M/06180XX/24
	
	"mb_station_block_header"(sb := #sb, mb_query := #mb_query);
	#mb_query.mb_addr := #mb_addr; // Device address.
	
	// Reduce power consumption, by halting execution. Nice if the device is running 
	// on battery. mb_delay is located inside the mb_extended_features.scl file.
	#mb_delay(delay := #delay, mb_query := #mb_query);
	
	#mb_query.mb_addr.%X5 := 0; // - Last bits of mb_addr is used for expanding 
	#mb_query.mb_addr.%X6 := 0; //   register addr, this means that only addr 1
	#mb_query.mb_addr.%X7 := 0; //   to 31 on the bus may be used.
	
	#mb_query.mode := #mb_query.c.read.holding_reg;
	
	#mb_query(data_addr := 123, data_ptr := #battery_remaining);
	#mb_query(data_addr := 2833, data_ptr := #serial_number); // Serial number	
	
	#mb_query.conf.buffer_handler := false;
	
	#mb_query(data_addr := 56, data_len := 44, data_ptr := #dommy);
	IF #mb_query.Done THEN
	    #vol_conv := "intreal"(mb_query := #mb_query, addr := 16#70/2);
	    #dword.%B3 := #mb_query.z.buffer[16]; // 16#80/2=64, (64-56)*2=16
	    #dword.%B2 := #mb_query.z.buffer[17];
	    #dword.%B1 := #mb_query.z.buffer[18];
	    #dword.%B0 := #mb_query.z.buffer[19];
	    #pressure := DWORD_TO_REAL(#dword); 
	    #dword.%B3 := #mb_query.z.buffer[20]; // 16#84/2=66, (66-56)*2=20
	    #dword.%B2 := #mb_query.z.buffer[21]; 
	    #dword.%B1 := #mb_query.z.buffer[22];
	    #dword.%B0 := #mb_query.z.buffer[23];
	    #temperature := DWORD_TO_REAL(#dword); 
	    #energi := "intreal"(mb_query := #mb_query, addr := 16#90/2);
	    #vol_measured := "intreal"(mb_query := #mb_query, addr := 16#98/2);
	END_IF;	
	
	#mb_query.data_len := #mb_query.c.auto_len;
	#mb_query.conf.buffer_handler := true;
	"mb_station_block_footer"(sb := #sb, mb_query := #mb_query);
	
END_FUNCTION_BLOCK

