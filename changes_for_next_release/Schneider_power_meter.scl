FUNCTION_BLOCK "Schneider_power_meter"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      mb_addr : USInt;
   END_VAR

   VAR_IN_OUT 
      mb_query : "mb_query";
   END_VAR

   VAR 
      sb : "mb_station_block_udt";
      data : "energy_udt";
      frequency : Real;
      temperature : Real;
      serial_number : UDInt;
   END_VAR

   VAR_TEMP 
      c : Int;
      tmp : DWord;
      r1_current : Struct
         L : Array[1..3] of DWord;
         N : DWord;
         avg : DWord;
      END_STRUCT;
      r2_voltage : Struct
         L_L : Array[1..3] of DWord;
         L_L_avg : DWord;
         L_N : Array[1..3] of DWord;
         L_N_avg : DWord;
      END_STRUCT;
      r3_power : Struct
         active : Array[1..3] of DWord;
         active_total : DWord;
         reactive : Array[1..3] of DWord;
         reactive_total : DWord;
         apparent : Array[1..3] of DWord;
         apparent_total : DWord;
      END_STRUCT;
      r4_energy : Struct   // (Accumulated)
         active_delivered : DWord;   // kWh (Into Load)
         active_received : DWord;   // kWh (Out of Load)
         active_delivered_plus_received : DWord;   // kWh
         active_delivered_minus_received : DWord;   // kWh
         reactive_delivered : DWord;   // kVARh
         reactive_received : DWord;   // kVARh
         reactive_delivered_plus_received : DWord;   // kVARh
         reactive_delivered_minus_Received : DWord;   // kVARh
         apparent_delivered : DWord;   // kVAh
         apparent_received : DWord;   // kVAh
         apparent_delivered_plus_Received : DWord;   // kVAh
         apparent_delivered_minus_received : DWord;   // kVAh
      END_STRUCT;
   END_VAR


BEGIN
	// Schneider - PowerLogic  (Power meter)
	// PM3200, PM3210, PM3250, PM3255, PM5560, PM5563, PM5563RD
	//
	// DOCA0006EN-06  -  08/2016
	// Default com.: 19200/8-E-1. Default addr: 1
	// 
	// https://www.se.com/ww/en/product/METSEPM3250/pm3250-power-meter---rs485/
	// https://download.schneider-electric.com/files?p_enDocType=User+guide&p_File_Name=DOCA0006EN-06.pdf&p_Doc_Ref=DOCA0006EN
	// https://www.schneider-electric.com/en/faqs/FA234017/
	//
	// Apparently there is a error in the datasheet, all register
	// addresses are added by two. Eg 3000 is actually 2998.
	
	
	"mb_station_block_header"(sb := #sb, mb_query := #mb_query);
	#mb_query.mb_addr := #mb_addr;
	#mb_query.mode := #mb_query.c.read.holding_reg;
	
	
	// Current 
	#mb_query(data_addr := 2998, data_ptr := #r1_current);
	IF #mb_query.Done THEN
	    FOR #c := 1 TO 3 DO
	        #data.current.L[#c] := DWORD_TO_REAL(ROR(IN := #r1_current.L[#c], N := 16));
	    END_FOR;
	    #data.current.N := DWORD_TO_REAL(ROR(IN := #r1_current.N, N := 16));
	    #data.current.avg := DWORD_TO_REAL(ROR(IN := #r1_current.avg, N := 16));
	END_IF;
	
	// Voltage 
	#mb_query(data_addr := 3018, data_ptr := #r2_voltage);
	IF #mb_query.Done THEN
	    FOR #c := 1 TO 3 DO
	        #data.voltage.L_L[#c] := DWORD_TO_REAL(ROR(IN := #r2_voltage.L_L[#c], N := 16));
	        #data.voltage.L_N[#c] := DWORD_TO_REAL(ROR(IN := #r2_voltage.L_N[#c], N := 16));
	    END_FOR;
	    #data.voltage.L_L_avg := DWORD_TO_REAL(ROR(IN := #r2_voltage.L_L_avg, N := 16));
	    #data.voltage.L_N_avg := DWORD_TO_REAL(ROR(IN := #r2_voltage.L_N_avg, N := 16));
	END_IF;
	
	// Power 
	#mb_query(data_addr := 3052, data_ptr := #r3_power);
	IF #mb_query.Done THEN
	    FOR #c := 1 TO 4 DO
	        #data.power.active[#c] := DWORD_TO_REAL(ROR(IN := #r3_power.active[#c], N := 16));
	        #data.power.reactive[#c] := DWORD_TO_REAL(ROR(IN := #r3_power.reactive[#c], N := 16));
	        #data.power.apparent[#c] := DWORD_TO_REAL(ROR(IN := #r3_power.apparent[#c], N := 16));
	    END_FOR;
	    #data.power.active_total := DWORD_TO_REAL(ROR(IN := #r3_power.active_total, N := 16));
	    #data.power.reactive_total := DWORD_TO_REAL(ROR(IN := #r3_power.reactive_total, N := 16));
	    #data.power.apparent_total := DWORD_TO_REAL(ROR(IN := #r3_power.apparent_total, N := 16));
	END_IF;
	
	// Frequency 
	#mb_query(data_addr := 3108, data_ptr := #tmp);
	IF #mb_query.Done THEN
	    #frequency := DWORD_TO_REAL(ROR(IN := #tmp, N := 16));
	END_IF;
	
	// Temperature 
	#mb_query(data_addr := 3130, data_ptr := #tmp);
	IF #mb_query.Done THEN
	    #temperature := DWORD_TO_REAL(ROR(IN := #tmp, N := 16));
	END_IF;
	
	// Serial number 
	#mb_query(data_addr := 128, data_ptr := #tmp);
	IF #mb_query.Done THEN
	    #serial_number := DWORD_TO_UDINT(ROR(IN := #tmp, N := 16));
	END_IF;
	
	// Energy (Accumulated)
	#mb_query(data_addr := 2698, data_ptr := #r4_energy);
	IF #mb_query.Done THEN
	    #data.energy.active_delivered := DWORD_TO_REAL(ROR(IN := #r4_energy.active_delivered, N := 16));
	    #data.energy.active_received := DWORD_TO_REAL(ROR(IN := #r4_energy.active_received, N := 16));
	    #data.energy.reactive_delivered := DWORD_TO_REAL(ROR(IN := #r4_energy.reactive_delivered, N := 16));
	    #data.energy.reactive_received := DWORD_TO_REAL(ROR(IN := #r4_energy.reactive_received, N := 16));
	    #data.energy.apparent_delivered := DWORD_TO_REAL(ROR(IN := #r4_energy.apparent_delivered, N := 16));
	    #data.energy.apparent_received := DWORD_TO_REAL(ROR(IN := #r4_energy.apparent_received, N := 16));
	END_IF;
	
	"mb_station_block_footer"(sb := #sb, mb_query := #mb_query);
	
END_FUNCTION_BLOCK

